// –ò–º–∏—Ç–∞—Ü–∏—è AI —Ç—Ä–µ–Ω–µ—Ä–∞
class AITrainer {
    constructor() {
        this.knowledgeBase = {
            weight_loss: {
                beginner: "–ö–∞—Ä–¥–∏–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ 3-4 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é + —Å–∏–ª–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è",
                intermediate: "–ò–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ + —Å–∏–ª–æ–≤—ã–µ –∫–æ–º–ø–ª–µ–∫—Å—ã",
                advanced: "HIIT —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ + –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ —Å–∏–ª–æ–≤—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã"
            },
            muscle_gain: {
                beginner: "–ë–∞–∑–æ–≤—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–µ–π –Ω–∞–≥—Ä—É–∑–æ–∫",
                intermediate: "–°–ø–ª–∏—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–∞ –≥—Ä—É–ø–ø—ã –º—ã—à—Ü",
                advanced: "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–µ –º–µ—Ç–æ–¥–∏–∫–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"
            },
            strength: {
                beginner: "–§–æ–∫—É—Å –Ω–∞ —Ç–µ—Ö–Ω–∏–∫–µ –±–∞–∑–æ–≤—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π",
                intermediate: "–ü—Ä–æ–≥—Ä–µ—Å—Å–∏—è –≤–µ—Å–æ–≤ –≤ –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–≤–∏–∂–µ–Ω–∏—è—Ö",
                advanced: "–°–∏–ª–æ–≤—ã–µ —Ü–∏–∫–ª—ã –∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è"
            }
        };
    }

    generateProgram(formData) {
        const { goal, level, age, weight, height, equipment, days } = formData;
        
        // –†–∞—Å—á–µ—Ç –ò–ú–¢
        const heightM = height / 100;
        const bmi = (weight / (heightM * heightM)).toFixed(1);
        
        // –ë–∞–∑–æ–≤—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        let program = `
            <h4>üìä –í–∞—à–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:</h4>
            <p>‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: ${age} –ª–µ—Ç</p>
            <p>‚Ä¢ –í–µ—Å: ${weight} –∫–≥, –†–æ—Å—Ç: ${height} —Å–º</p>
            <p>‚Ä¢ –ò–ú–¢: ${bmi}</p>
            <p>‚Ä¢ –¶–µ–ª—å: ${this.getGoalText(goal)}</p>
            <p>‚Ä¢ –£—Ä–æ–≤–µ–Ω—å: ${this.getLevelText(level)}</p>
            <p>‚Ä¢ –û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: ${this.getEquipmentText(equipment)}</p>
            <p>‚Ä¢ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ –Ω–µ–¥–µ–ª—é: ${days}</p>
            
            <h4>üí™ –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:</h4>
        `;

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ü–µ–ª–µ–π
        program += this.generateWorkoutPlan(goal, level, days, equipment);
        
        // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é
        program += this.generateNutritionAdvice(goal, weight, bmi);
        
        // –°–æ–≤–µ—Ç—ã –ø–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—é
        program += this.generateRecoveryTips(level, age);

        return program;
    }

    getGoalText(goal) {
        const goals = {
            'weight_loss': '–ü–æ—Ö—É–¥–µ–Ω–∏–µ',
            'muscle_gain': '–ù–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã',
            'strength': '–£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å–∏–ª—ã',
            'endurance': '–†–∞–∑–≤–∏—Ç–∏–µ –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏',
            'toning': '–¢–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–∞'
        };
        return goals[goal] || goal;
    }

    getLevelText(level) {
        const levels = {
            'beginner': '–ù–∞—á–∏–Ω–∞—é—â–∏–π',
            'intermediate': '–°—Ä–µ–¥–Ω–∏–π',
            'advanced': '–ü—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π'
        };
        return levels[level] || level;
    }

    getEquipmentText(equipment) {
        const equipmentMap = {
            'full_gym': '–ü–æ–ª–Ω—ã–π —Ç—Ä–µ–Ω–∞–∂–µ—Ä–Ω—ã–π –∑–∞–ª',
            'basic_gym': '–ë–∞–∑–æ–≤—ã–µ —Ç—Ä–µ–Ω–∞–∂–µ—Ä—ã',
            'home': '–î–æ–º–∞—à–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏',
            'bodyweight': '–¢–æ–ª—å–∫–æ –≤–µ—Å —Ç–µ–ª–∞'
        };
        return equipmentMap[equipment] || equipment;
    }

    generateWorkoutPlan(goal, level, days, equipment) {
        let plan = '';
        
        const workouts = {
            weight_loss: {
                2: ["–î–µ–Ω—å 1: –ö–∞—Ä–¥–∏–æ + –∫—Ä—É–≥–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "–î–µ–Ω—å 2: –°–∏–ª–æ–≤—ã–µ + –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã"],
                3: ["–î–µ–Ω—å 1: –í–ò–ò–¢", "–î–µ–Ω—å 2: –°–∏–ª–æ–≤—ã–µ –Ω–æ–≥–∏", "–î–µ–Ω—å 3: –ö–∞—Ä–¥–∏–æ + –≤–µ—Ä—Ö —Ç–µ–ª–∞"],
                4: ["–î–µ–Ω—å 1: –í–ò–ò–¢", "–î–µ–Ω—å 2: –ù–æ–≥–∏", "–î–µ–Ω—å 3: –í–µ—Ä—Ö —Ç–µ–ª–∞", "–î–µ–Ω—å 4: –ê–∫—Ç–∏–≤–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ"],
                5: ["–î–µ–Ω—å 1: –í–ò–ò–¢", "–î–µ–Ω—å 2: –ù–æ–≥–∏", "–î–µ–Ω—å 3: –í–µ—Ä—Ö —Ç–µ–ª–∞", "–î–µ–Ω—å 4: –ö–∞—Ä–¥–∏–æ", "–î–µ–Ω—å 5: –§—É–ª–±–∞–¥–∏"]
            },
            muscle_gain: {
                2: ["–î–µ–Ω—å 1: –í–µ—Ä—Ö —Ç–µ–ª–∞", "–î–µ–Ω—å 2: –ù–∏–∑ —Ç–µ–ª–∞"],
                3: ["–î–µ–Ω—å 1: –ì—Ä—É–¥—å/—Å–ø–∏–Ω–∞", "–î–µ–Ω—å 2: –ù–æ–≥–∏", "–î–µ–Ω—å 3: –ü–ª–µ—á–∏/—Ä—É–∫–∏"],
                4: ["–î–µ–Ω—å 1: –ì—Ä—É–¥—å", "–î–µ–Ω—å 2: –°–ø–∏–Ω–∞", "–î–µ–Ω—å 3: –ù–æ–≥–∏", "–î–µ–Ω—å 4: –ü–ª–µ—á–∏/—Ä—É–∫–∏"],
                5: ["–î–µ–Ω—å 1: –ù–æ–≥–∏", "–î–µ–Ω—å 2: –ì—Ä—É–¥—å", "–î–µ–Ω—å 3: –°–ø–∏–Ω–∞", "–î–µ–Ω—å 4: –ü–ª–µ—á–∏", "–î–µ–Ω—å 5: –†—É–∫–∏"]
            }
        };

        const selectedWorkouts = workouts[goal]?.[days] || workouts['weight_loss'][3];
        
        selectedWorkouts.forEach(workout => {
            plan += `<p>‚Ä¢ ${workout}</p>`;
        });

        return plan;
    }

    generateNutritionAdvice(goal, weight, bmi) {
        let advice = `<h4>üçé –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é:</h4>`;
        
        const calorieBase = weight * 30; // –ë–∞–∑–æ–≤–∞—è —Ñ–æ—Ä–º—É–ª–∞ –∫–∞–ª–æ—Ä–∏–π
        
        switch(goal) {
            case 'weight_loss':
                advice += `<p>‚Ä¢ –î–µ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π: ${Math.round(calorieBase * 0.8)}-${Math.round(calorieBase * 0.9)} –∫–∫–∞–ª/–¥–µ–Ω—å</p>`;
                advice += `<p>‚Ä¢ –ë–µ–ª–∫–∏: 1.6-2.2–≥/–∫–≥ –≤–µ—Å–∞</p>`;
                advice += `<p>‚Ä¢ –ü–µ–π—Ç–µ 2-3 –ª–∏—Ç—Ä–∞ –≤–æ–¥—ã –≤ –¥–µ–Ω—å</p>`;
                break;
            case 'muscle_gain':
                advice += `<p>‚Ä¢ –ü—Ä–æ—Ñ–∏—Ü–∏—Ç –∫–∞–ª–æ—Ä–∏–π: ${calorieBase + 300}-${calorieBase + 500} –∫–∫–∞–ª/–¥–µ–Ω—å</p>`;
                advice += `<p>‚Ä¢ –ë–µ–ª–∫–∏: 1.8-2.5–≥/–∫–≥ –≤–µ—Å–∞</p>`;
                advice += `<p>‚Ä¢ –£–≥–ª–µ–≤–æ–¥—ã: 4-6–≥/–∫–≥ –≤–µ—Å–∞</p>`;
                break;
            default:
                advice += `<p>‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–µ –∫–∞–ª–æ—Ä–∏–∏: ${calorieBase} –∫–∫–∞–ª/–¥–µ–Ω—å</p>`;
                advice += `<p>‚Ä¢ –°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ: –±–µ–ª–∫–∏, –∂–∏—Ä—ã, —É–≥–ª–µ–≤–æ–¥—ã</p>`;
        }

        return advice;
    }

    generateRecoveryTips(level, age) {
        let tips = `<h4>üõå –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ:</h4>`;
        tips += `<p>‚Ä¢ –°–æ–Ω: 7-9 —á–∞—Å–æ–≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ</p>`;
        tips += `<p>‚Ä¢ –†–∞—Å—Ç—è–∂–∫–∞ –ø–æ—Å–ª–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏</p>`;
        tips += `<p>‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –¥–Ω–∏ –æ—Ç–¥—ã—Ö–∞</p>`;
        
        if (age > 40) {
            tips += `<p>‚Ä¢ –£–¥–µ–ª—è–π—Ç–µ –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–∑–º–∏–Ω–∫–µ</p>`;
        }

        return tips;
    }

    async answerQuestion(question) {
        // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏ –æ—Ç–≤–µ—Ç–∞ AI
        await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));
        
        const responses = {
            '–ø—Ä–∏–≤–µ—Ç': '–ü—Ä–∏–≤–µ—Ç! –†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å! –ö–∞–∫ –≤–∞—à–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏?',
            '–∫–∞–∫ –Ω–∞—á–∞—Ç—å': '–ù–∞—á–Ω–∏—Ç–µ —Å –±–∞–∑–æ–≤—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π, —Å—Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Ç–µ—Ö–Ω–∏–∫–µ –∏ –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ –Ω–∞–≥—Ä—É–∑–∫—É.',
            '–ø–∏—Ç–∞–Ω–∏–µ': '–ü–∏—Ç–∞–Ω–∏–µ - —ç—Ç–æ 70% —É—Å–ø–µ—Ö–∞! –°–±–∞–ª–∞–Ω—Å–∏—Ä—É–π—Ç–µ –±–µ–ª–∫–∏, –∂–∏—Ä—ã –∏ —É–≥–ª–µ–≤–æ–¥—ã —Å–æ–≥–ª–∞—Å–Ω–æ –≤–∞—à–∏–º —Ü–µ–ª—è–º.',
            '–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ': '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–∫ –∂–µ –≤–∞–∂–Ω–æ, –∫–∞–∫ –∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏! –°–ø–∏—Ç–µ 7-9 —á–∞—Å–æ–≤ –∏ –ø–µ–π—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–æ–¥—ã.',
            '–º–æ—Ç–∏–≤–∞—Ü–∏—è': '–ü–æ–º–Ω–∏—Ç–µ: –ø—Ä–æ–≥—Ä–µ—Å—Å - —ç—Ç–æ –º–∞—Ä–∞—Ñ–æ–Ω, –∞ –Ω–µ —Å–ø—Ä–∏–Ω—Ç! –ö–∞–∂–¥–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏–±–ª–∏–∂–∞–µ—Ç –≤–∞—Å –∫ —Ü–µ–ª–∏!'
        };

        const lowerQuestion = question.toLowerCase();
        
        for (const [key, response] of Object.entries(responses)) {
            if (lowerQuestion.includes(key)) {
                return response;
            }
        }

        return '–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–ª—è –≤–∞—à–∏—Ö –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –≤—ã—à–µ, –∏ —è —Å–æ–∑–¥–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.';
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è AI —Ç—Ä–µ–Ω–µ—Ä–∞
const aiTrainer = new AITrainer();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ä–º—ã
document.getElementById('fitness-form').addEventListener('submit', async function(e) {
    e.preventDefault();
    
    const formData = {
        goal: document.getElementById('goal').value,
        level: document.getElementById('level').value,
        age: document.getElementById('age').value,
        weight: document.getElementById('weight').value,
        height: document.getElementById('height').value,
        equipment: document.getElementById('equipment').value,
        days: document.getElementById('days').value
    };

    // –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É
    document.getElementById('loading').classList.remove('hidden');
    document.getElementById('result').classList.add('hidden');

    // –ò–º–∏—Ç–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI
    setTimeout(() => {
        const program = aiTrainer.generateProgram(formData);
        document.getElementById('program-output').innerHTML = program;
        document.getElementById('loading').classList.add('hidden');
        document.getElementById('result').classList.remove('hidden');
    }, 2000);
});

// –§—É–Ω–∫—Ü–∏–∏ —á–∞—Ç–∞
function addMessage(message, isUser = false) {
    const chatMessages = document.getElementById('chat-messages');
    const messageDiv = document.createElement('div');
    messageDiv.className = `message ${isUser ? 'user-message' : 'ai-message'}`;
    
    messageDiv.innerHTML = `
        <div class="message-avatar">${isUser ? 'üë§' : 'ü§ñ'}</div>
        <div class="message-content">
            <p>${message}</p>
        </div>
    `;
    
    chatMessages.appendChild(messageDiv);
    chatMessages.scrollTop = chatMessages.scrollHeight;
}

async function sendMessage() {
    const input = document.getElementById('chat-input');
    const message = input.value.trim();
    
    if (!message) return;
    
    // –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    addMessage(message, true);
    input.value = '';
    
    // –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI
    const response = await aiTrainer.answerQuestion(message);
    addMessage(response, false);
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter –≤ —á–∞—Ç–µ
document.getElementById('chat-input').addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
        sendMessage();
    }
});

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function scrollToTrainer() {
    document.getElementById('trainer').scrollIntoView({ 
        behavior: 'smooth' 
    });
}

function saveProgram() {
    const programText = document.getElementById('program-output').innerText;
    const blob = new Blob([programText], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = '–º–æ—è_–ø—Ä–æ–≥—Ä–∞–º–º–∞_—Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.txt';
    a.click();
    URL.revokeObjectURL(url);
    
    alert('–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!');
}

// –ü–ª–∞–≤–Ω–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
document.querySelectorAll('a[href^="#"]').forEach(anchor => {
    anchor.addEventListener('click', function (e) {
        e.preventDefault();
        const target = document.querySelector(this.getAttribute('href'));
        if (target) {
            target.scrollIntoView({
                behavior: 'smooth'
            });
        }
    });
});